
#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
private:
    int V;
    vector<vector<int>> adj;

public:
    Graph(int vertices) {
        V = vertices;
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u); // Since the graph is undirected
    }

    void parallelBFS(int start) {
        vector<bool> visited(V, false);
        queue<int> q;

        visited[start] = true;
        q.push(start);

        cout << "Parallel BFS starting from vertex " << start << ": ";

        while (!q.empty()) {
            int levelSize = q.size();

            #pragma omp parallel for
            for (int i = 0; i < levelSize; ++i) {
                int current;
                
                #pragma omp critical
                {
                    current = q.front();
                    q.pop();
                    cout << current << " ";
                }

                // Parallelize neighbor access
                #pragma omp parallel for
                for (int j = 0; j < adj[current].size(); ++j) {
                    int neighbor = adj[current][j];

                    #pragma omp critical
                    {
                        if (!visited[neighbor]) {
                            visited[neighbor] = true;
                            q.push(neighbor);
                        }
                    }
                }
            }
        }

        cout << endl;
    }

    void parallelDFS(int start) {
        vector<bool> visited(V, false);
        stack<int> stk;

        stk.push(start);

        cout << "Parallel DFS starting from vertex " << start << ": ";

        while (!stk.empty()) {
            int current;

            #pragma omp critical
            {
                current = stk.top();
                stk.pop();
            }

            if (!visited[current]) {
                visited[current] = true;
                cout << current << " ";

                #pragma omp parallel for
                for (int i = 0; i < adj[current].size(); ++i) {
                    int neighbor = adj[current][i];

                    #pragma omp critical
                    {
                        if (!visited[neighbor]) {
                            stk.push(neighbor);
                        }
                    }
                }
            }
        }

        cout << endl;
    }
};

int main() {
    Graph g(6);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);

    // Parallel Traversals
    g.parallelBFS(0);
    g.parallelDFS(0);

    return 0;
}